// Code generated by protoc-gen-go. DO NOT EDIT.
// source: response.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 可扩充响应消息头，封装通用的请求消息头，可扩充.
type ResponseHeader struct {
	// 请求唯一的trace_id，全局唯一，响应头中带回，用于跟踪服务.
	TraceId string `protobuf:"bytes,1,opt,name=trace_id,json=traceId" json:"trace_id,omitempty"`
	// 服务总响应时间,ms.
	TotalTime int64 `protobuf:"varint,2,opt,name=total_time,json=totalTime" json:"total_time,omitempty"`
	// 通用状态，如参数校验等功能.
	Status Status `protobuf:"varint,3,opt,name=status,enum=api.Status" json:"status,omitempty"`
	// 错误消息，STATUS_SUCCESS时无此消息.
	Msg string `protobuf:"bytes,11,opt,name=msg" json:"msg,omitempty"`
}

func (m *ResponseHeader) Reset()                    { *m = ResponseHeader{} }
func (m *ResponseHeader) String() string            { return proto.CompactTextString(m) }
func (*ResponseHeader) ProtoMessage()               {}
func (*ResponseHeader) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *ResponseHeader) GetTraceId() string {
	if m != nil {
		return m.TraceId
	}
	return ""
}

func (m *ResponseHeader) GetTotalTime() int64 {
	if m != nil {
		return m.TotalTime
	}
	return 0
}

func (m *ResponseHeader) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_STATUS_EMPTY
}

func (m *ResponseHeader) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

// 通用翻页响应.
type PageResponse struct {
	// 页码，[1,n].
	PageNum int32 `protobuf:"varint,1,opt,name=page_num,json=pageNum" json:"page_num,omitempty"`
	// 分页大小.如果获取的是全部数据, 该字段值为0.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	// 总记录数.
	TotalCount int32 `protobuf:"varint,3,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
}

func (m *PageResponse) Reset()                    { *m = PageResponse{} }
func (m *PageResponse) String() string            { return proto.CompactTextString(m) }
func (*PageResponse) ProtoMessage()               {}
func (*PageResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *PageResponse) GetPageNum() int32 {
	if m != nil {
		return m.PageNum
	}
	return 0
}

func (m *PageResponse) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *PageResponse) GetTotalCount() int32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

// 通用政策响应.
type PolicyResponse struct {
	// 响应头.
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// 业务相关数据响应，直接返回封装的数据,如：FlightRuleItem，CarRuleItem
	// 单笔数据，也以repeated List方式返回.
	Data []*google_protobuf.Any `protobuf:"bytes,100,rep,name=data" json:"data,omitempty"`
}

func (m *PolicyResponse) Reset()                    { *m = PolicyResponse{} }
func (m *PolicyResponse) String() string            { return proto.CompactTextString(m) }
func (*PolicyResponse) ProtoMessage()               {}
func (*PolicyResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *PolicyResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PolicyResponse) GetData() []*google_protobuf.Any {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*ResponseHeader)(nil), "api.ResponseHeader")
	proto.RegisterType((*PageResponse)(nil), "api.PageResponse")
	proto.RegisterType((*PolicyResponse)(nil), "api.PolicyResponse")
}

func init() { proto.RegisterFile("response.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 319 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0x5f, 0x4b, 0xf3, 0x30,
	0x14, 0xc6, 0xe9, 0xdb, 0x77, 0x9b, 0x3b, 0x95, 0x22, 0xd1, 0x8b, 0x6e, 0x22, 0x96, 0xed, 0xc2,
	0x82, 0x90, 0xc1, 0xfc, 0x04, 0xea, 0x8d, 0xde, 0xc8, 0xc8, 0xbc, 0x1f, 0x59, 0x1b, 0x63, 0x60,
	0x49, 0x4a, 0x93, 0x80, 0xdd, 0x9d, 0xdf, 0x5c, 0x7a, 0xba, 0x0a, 0xde, 0xf5, 0x3c, 0xe7, 0xcf,
	0xf3, 0xeb, 0x13, 0x48, 0x1b, 0xe1, 0x6a, 0x6b, 0x9c, 0xa0, 0x75, 0x63, 0xbd, 0x25, 0x31, 0xaf,
	0xd5, 0x7c, 0x26, 0xad, 0x95, 0x07, 0xb1, 0x42, 0x69, 0x1f, 0x3e, 0x56, 0xdc, 0xb4, 0x7d, 0x7f,
	0x9e, 0x08, 0x13, 0xb4, 0xeb, 0x8b, 0xc5, 0x77, 0x04, 0x29, 0x3b, 0xed, 0xbf, 0x08, 0x5e, 0x89,
	0x86, 0xcc, 0xe0, 0xcc, 0x37, 0xbc, 0x14, 0x3b, 0x55, 0x65, 0x51, 0x1e, 0x15, 0x53, 0x36, 0xc1,
	0xfa, 0xb5, 0x22, 0x37, 0x00, 0xde, 0x7a, 0x7e, 0xd8, 0x79, 0xa5, 0x45, 0xf6, 0x2f, 0x8f, 0x8a,
	0x98, 0x4d, 0x51, 0x79, 0x57, 0x5a, 0x90, 0x25, 0x8c, 0x9d, 0xe7, 0x3e, 0xb8, 0x2c, 0xce, 0xa3,
	0x22, 0x5d, 0x27, 0x94, 0xd7, 0x8a, 0x6e, 0x51, 0x62, 0xa7, 0x16, 0xb9, 0x80, 0x58, 0x3b, 0x99,
	0x25, 0x78, 0xb9, 0xfb, 0x5c, 0x48, 0x38, 0xdf, 0x70, 0x29, 0x06, 0x8c, 0x0e, 0xa0, 0xe6, 0x52,
	0xec, 0x4c, 0xd0, 0x08, 0x30, 0x62, 0x93, 0xae, 0x7e, 0x0b, 0x9a, 0x5c, 0xc3, 0x14, 0x5b, 0x4e,
	0x1d, 0x7b, 0xff, 0x11, 0xc3, 0xd9, 0xad, 0x3a, 0x0a, 0x72, 0x0b, 0x49, 0x4f, 0x57, 0xda, 0x60,
	0x3c, 0x32, 0x8c, 0x58, 0x0f, 0xfc, 0xdc, 0x29, 0x0b, 0x09, 0xe9, 0xc6, 0x1e, 0x54, 0xd9, 0xfe,
	0x5a, 0xdd, 0xc3, 0xf8, 0x13, 0xff, 0x1a, 0x8d, 0x92, 0xf5, 0x25, 0x12, 0xff, 0x0d, 0x84, 0x9d,
	0x46, 0x48, 0x01, 0xff, 0x2b, 0xee, 0x79, 0x56, 0xe5, 0x71, 0x91, 0xac, 0xaf, 0x68, 0x1f, 0x31,
	0x1d, 0x22, 0xa6, 0x8f, 0xa6, 0x65, 0x38, 0xf1, 0x74, 0x07, 0xcb, 0xd2, 0x6a, 0xfa, 0xa5, 0x8c,
	0x6c, 0x83, 0xa1, 0x35, 0x9a, 0xe2, 0xe9, 0xca, 0x5b, 0x3a, 0xbc, 0xd7, 0x26, 0xda, 0x8f, 0x71,
	0xf9, 0xe1, 0x27, 0x00, 0x00, 0xff, 0xff, 0x43, 0x29, 0x17, 0x1a, 0xc4, 0x01, 0x00, 0x00,
}
